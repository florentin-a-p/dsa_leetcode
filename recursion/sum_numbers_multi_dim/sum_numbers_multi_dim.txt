package main

import "fmt"

func isTypeInt(obj interface{}) bool {
	_, ok := obj.(int)
	if ok {
		return true
	} else {
		return false
	}
}

func sumElementsNestedListMultiDim(multiplier int, array []interface{}) int {
	var sum int
	//var multiplier = 1
	//fmt.Println("first call: ", array, " sum: ", sum, " multiplier: ", multiplier)
	if len(array) == 0 { //stopping point
		sum = 0
	} else if len(array) > 0 {
		first := array[0]
		if isTypeInt(first) {
			sum = sum + first.(int)
		} else {
			multiplier = multiplier + 1
			firstObj, _ := first.([]interface{})
			//fmt.Println("multiplier: ", multiplier)
			sum = sum + multiplier*sumElementsNestedListMultiDim(multiplier, firstObj)
			multiplier = multiplier - 1
		}
		sum = sum + sumElementsNestedListMultiDim(multiplier, array[1:])
	}
	//fmt.Println("before return: ", array, " sum: ", sum, " multiplier: ", multiplier)
	return sum
}

func main() {
	//array := []interface{}{
	//	1,
	//	2,
	//	[]interface{}{3, 4},
	//	5,
	//	6}

	array := []interface{}{
		5,
		2,
		[]interface{}{7, -1},
		3,
		[]interface{}{6, []interface{}{-13, 8}, 4}}
	var multiplier = 1

	answer := sumElementsNestedListMultiDim(multiplier, array)
	fmt.Println("sum of all elements in nested list is: ", answer)

}

//loop over the array
//check if the element is of type array -> yg ini, anggep aja udh keimplement, biar bs fokus di recursion
//yes -> call recursion function
//no -> add the element to the existing sum
